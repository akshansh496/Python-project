import tkinter as tk
import sqlite3

def create_connection(db_file):
    """Creates a database connection to the SQLite database."""
    conn = None
    try:
        conn = sqlite3.connect(db_file)
        return conn
    except sqlite3.Error as e:
        print(e)
        return None

def create_bills_table(conn):
    """Creates a table to store bill information."""
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS bills (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            description TEXT,
            amount REAL
        )
    ''')
    conn.commit()

def add_bill(conn, description, amount):
    """Adds a new bill to the database."""
    cursor = conn.cursor()
    cursor.execute("INSERT INTO bills (description, amount) VALUES (?, ?)", (description, amount))
    conn.commit()

def view_all_bills(conn):
    """Displays all bills from the database."""
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM bills")
    rows = cursor.fetchall()

    print("ID\tDescription\tAmount")
    print("-" * 30)
    for row in rows:
        print(f"{row[0]}\t{row[1]}\t{row[2]}")

def calculate_total_bill():
    """Calculates the total amount of all bills."""
    # ... (existing code for calculating total amount)
    global total_label
    total_label.config(text=f"Total Bill Amount: {total_amount:.2f}")

    # Update the GUI to display total amount
    total_label.config(text=f"Total Bill Amount: {total_amount:.2f}")

def create_gui():
    root = tk.Tk()
    root.title("Bill Management System")

    # Labels for description and amount
    description_label = tk.Label(root, text="Description:")
    description_label.pack()
    description_entry = tk.Entry(root)
    description_entry.pack()

    amount_label = tk.Label(root, text="Amount:")
    amount_label.pack()
    amount_entry = tk.Entry(root)
    amount_entry.pack()

    # Button to add a new bill
    def add_bill_click():
        description = description_entry.get()
        amount_str = amount_entry.get()
        try:
            amount = float(amount_str)
            add_bill(conn, description, amount)
            description_entry.delete(0, tk.END)
            amount_entry.delete(0, tk.END)
        except ValueError:
            error_label = tk.Label(root, text="Invalid amount. Please enter a number.", fg="red")
            error_label.pack()
            error_label.after(2000, error_label.destroy)

    add_bill_button = tk.Button(root, text="Add Bill", command=add_bill_click)
    add_bill_button.pack()

    # Button to view all bills
    view_bills_button = tk.Button(root, text="View Bills", command=lambda: view_all_bills(conn))
    view_bills_button.pack()

    # Button to calculate total
    calculate_button = tk.Button(root, text="Calculate Total", command=lambda: calculate_total_bill(conn))
    calculate_button.pack()

    # Label to display total amount
    total_label = tk.Label(root, text="Total Bill Amount: ")
    total_label.pack()

    root.mainloop()

if __name__ == "__main__":
    database = "bills.db"
    conn = create_connection(database)
    create_bills_table(conn)

    create_gui()

    conn.close()
